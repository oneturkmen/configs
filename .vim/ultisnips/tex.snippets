# Add a context s.t.
# math stuff is not displayed
# in text tags, for example.
#global !p
#texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
#    'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
#    'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]
#
#texIgnoreMathZones = ['texMathText']
#
#texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
#texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
#    
#ignore = texIgnoreMathZoneIds[0]
#
#def math():
#    synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
#
#    try:
#	first = next(
#	    i for i in reversed(synstackids)
#	    if i in texIgnoreMathZoneIds or i in texMathZoneIds
#	)
#	return first != ignore
#    except StopIteration:
#	return False
#
#endglobal


# Begin scope
snippet beg "Begin {} / End {}" bA
\begin{$1}
    ${0}
\end{$1}
endsnippet

# Inline math
snippet mk "Inline Math" w
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

# Display math scope 
snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

# Changes "a1" to "a_1"
snippet '([A-Za-z])(\d)' "auto subscript" wr
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

# Changes "a_12" to "a_{12}"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wr
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# Fractions "\frac{a}{b}"
snippet // "Fraction" i
\\frac{$1}{$2}$0
endsnippet

# Matches fractions like 5/2, 5_a/2
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet
